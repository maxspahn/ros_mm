joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 50

panda_joint_publisher:
  type: "joint_state_controller/JointStateController"
  publish_rate: 30

joint1_position_controller:
  type: "velocity_controllers/JointPositionController"
  joint: "mmrobot/mmrobot_joint1"
  pid : {p: 1.0, i: 0.01, d: 10.0}

panda_arm_controller:
    type: position_controllers/JointTrajectoryController
    joints:
        - mmrobot_joint1
        - mmrobot_joint2
        - mmrobot_joint3
        - mmrobot_joint4
        - mmrobot_joint5
        - mmrobot_joint6
        - mmrobot_joint7

    constraints:
        goal_time: 2.0

    state_publish_rate: 100
    allow_partial_joints_goal: true

panda_hand_controller:
    type: effort_controllers/JointTrajectoryController
    joints:
        - mmrobot_finger_joint1
        - mmrobot_finger_joint2

    gains:
      panda_finger_joint1: { p: 5, d: 3.0, i: 0, i_clamp: 1 }
      panda_finger_joint2: { p: 5, d: 1.0, i: 0, i_clamp: 1 }

    state_publish_rate: 25
joint_position_controller:
    type: panda_simulation/JointPositionController
    arm_id: panda
    joint_names:
        - mmrobot_joint1
        - mmrobot_joint2
        - mmrobot_joint3
        - mmrobot_joint4
        - mmrobot_joint5
        - mmrobot_joint6
        - mmrobot_joint7
    gains: [
        1, 1, 1, 1, 1, 1, 1
    ]

mmrobot_joint1_position_controller:
  type: effort_controllers/JointPositionController
  joint: mmrobot_joint1
  pid: {p: 100.0, i: 0.01, d: 10.0}
mmrobot_joint2_position_controller:
  type: effort_controllers/JointPositionController
  joint: mmrobot_joint2
  pid: {p: 100.0, i: 0.01, d: 10.0}
mmrobot_joint3_position_controller:
  type: effort_controllers/JointPositionController
  joint: mmrobot_joint3
  pid: {p: 100.0, i: 0.01, d: 10.0}
mmrobot_joint4_position_controller:
  type: effort_controllers/JointPositionController
  joint: mmrobot_joint4
  pid: {p: 100.0, i: 0.01, d: 10.0}
mmrobot_joint5_position_controller:
  type: effort_controllers/JointPositionController
  joint: mmrobot_joint5
  pid: {p: 100.0, i: 0.01, d: 10.0}
mmrobot_joint6_position_controller:
  type: effort_controllers/JointPositionController
  joint: mmrobot_joint6
  pid: {p: 100.0, i: 0.01, d: 10.0}
mmrobot_joint7_position_controller:
  type: effort_controllers/JointPositionController
  joint: mmrobot_joint7
  pid: {p: 100.0, i: 0.01, d: 10.0}

mmrobot_joint1_controller:
  type: velocity_controllers/JointVelocityController
  joint: mmrobot_joint1
mmrobot_joint2_controller:
  type: velocity_controllers/JointVelocityController
  joint: mmrobot_joint2
mmrobot_joint3_controller:
  type: velocity_controllers/JointVelocityController
  joint: mmrobot_joint3
mmrobot_joint4_controller:
  type: velocity_controllers/JointVelocityController
  joint: mmrobot_joint4
mmrobot_joint5_controller:
  type: velocity_controllers/JointVelocityController
  joint: mmrobot_joint5
mmrobot_joint6_controller:
  type: velocity_controllers/JointVelocityController
  joint: mmrobot_joint6
mmrobot_joint7_controller:
  type: velocity_controllers/JointVelocityController
  joint: mmrobot_joint7

joint_trajectory_controller:
  type: effort_controllers/JointTrajectoryController
  joints:
      - mmrobot_joint1
      - mmrobot_joint2
      - mmrobot_joint3
      - mmrobot_joint4
      - mmrobot_joint5
      - mmrobot_joint6
      - mmrobot_joint7
  gains:
    mmrobot_joint1: { p: 12000, d: 50, i: 0.0, i_clamp: 10000 }
    mmrobot_joint2: { p: 30000, d: 100, i: 0.02, i_clamp: 10000 }
    mmrobot_joint3: { p: 18000, d: 50, i: 0.01, i_clamp: 1 }
    mmrobot_joint4: { p: 18000, d: 70, i: 0.01, i_clamp: 10000 }
    mmrobot_joint5: { p: 12000, d: 70, i: 0.01, i_clamp: 1 }
    mmrobot_joint6: { p: 7000, d: 50, i: 0.01, i_clamp: 1 }
    mmrobot_joint7: { p: 2000, d: 20, i: 0.0, i_clamp: 1 }

  constraints:
    goal_time: 2.0
  state_publish_rate : 25
  

boxer_joint_publisher:
  type: "joint_state_controller/JointStateController"
  publish_rate: 30

boxer_lift_controller:
  type: "boxer_control/BoxerLiftController"
  joint: "lift_joint"
  height_lowered: 0.0
  height_raised: 0.062
  height_charge: 0.078
  threshold: 0.002
  difference_threshold: 0.2

boxer_velocity_controller:
  type: "diff_drive_controller/DiffDriveController"
  left_wheel: ['wheel_left_joint']
  right_wheel: ['wheel_right_joint']
  publish_rate: 30
  pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  cmd_vel_timeout: 0.25

  # Odometry fused with IMU is published by robot_localization, so
  # no need to publish a TF based on encoders alone.
  enable_odom_tf: true
  base_frame_id: base_link #default base_link

  # Wheel separation and radius multipliers
  wheel_separation_multiplier: 1.0 # default: 1.0
  wheel_radius_multiplier    : 1.0 # default: 1.0

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 1.9   # m/s
      has_acceleration_limits: true
      max_acceleration       : 2.0   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 2.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 2.0   # rad/s^2

right_wheel:
  type: velocity_controllers/JointVelocityController
  joint: wheel_right_joint
  pid:
    p: 5.0
    i: 20.0
    i_clamp: 100

left_wheel:
  type: velocity_controllers/JointVelocityController
  joint: wheel_left_joint
  pid:
    p: 5.0
    i: 20.0
    i_clamp: 100

