#!/usr/bin/env python

import rospy
import numpy as np
import tf
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from std_msgs.msg import Float64, Float64MultiArray
from sensor_msgs.msg import JointState


class CurStatePublisher(object):
    def __init__(self):
        rospy.init_node("mmrobotStatePublisher")
        self.rate = rospy.Rate(100)
        self.pub = rospy.Publisher('/mmrobot/curState', Float64MultiArray, queue_size=10)
        self.subOdom = rospy.Subscriber(
            "/mmrobot/ground_truth_odom", Odometry, self.odom_cb
        )
        self.subJointPosition = rospy.Subscriber(
            "/mmrobot/joint_states", JointState, self.jointState_cb
        )
        self.curState = Float64MultiArray()

    def odom_cb(self, odometry):
        curPos = np.array(
            [odometry.pose.pose.position.x, odometry.pose.pose.position.y]
        )
        curQuat = odometry.pose.pose.orientation
        quaternion = (curQuat.x, curQuat.y, curQuat.z, curQuat.w)
        euler = tf.transformations.euler_from_quaternion(quaternion)
        curOri = np.array([euler[2]])
        self.curState.data[0:3] = np.concatenate((curPos, curOri))

    def jointState_cb(self, jointStates):
        self.curState.data[3:11] = np.array(jointStates.position[3:10])

    def run(self):
        while not rospy.is_shutdown():
            self.pub.publish(self.curState)
            self.rate.sleep()


if __name__ == "__main__":
    myCurStatePublisher = CurStatePublisher()
    try:
        myCurStatePublisher.run()
    except rospy.ROSInterruptException:
        pass
