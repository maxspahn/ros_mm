<launch>
  <arg name="use_rviz" default="true"/>
  <arg name="load_gripper" default="true"/>
  <arg name="panda_hi" default="PositionJointInterface"/>
  <arg name="effort_control" default="follow_trajectory"/>
  <arg name="boxer_control" default="diff_drive"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
<!--
  <rosparam file="$(find mobile_control)/config/boxer_control.yaml" command="load" ns="/boxer"/>
  <rosparam file="$(find mobile_control)/config/panda_control.yaml" command="load" ns="/panda"/>
-->
  <rosparam file="$(find mobile_control)/config/mmrobot_control.yaml" command="load" ns="/mmrobot"/>
    


  <!-- Seperation between controller for boxer and arm -->
  <group if="$(eval boxer_control == 'diff_drive')">
    <node name="controller_spawner_boxer" pkg="controller_manager" ns="/mmrobot" type="spawner" respawn="false" output="screen" args="
      boxer_velocity_controller
      boxer_joint_publisher"/>
  </group>
  <group if="$(eval boxer_control == 'single_wheel')">
    <node name="controller_spawner_boxer" pkg="controller_manager" ns="/mmrobot" type="spawner" respawn="false" output="screen" args="
      left_wheel
      right_wheel"/>
  </group>

  <group if="$(eval panda_hi == 'VelocityJointInterface')">
    <node name="controller_spawner_arm" pkg="controller_manager" ns="/mmrobot" type="spawner" respawn="false" output="screen" args="
      mmrobot_joint1_controller
      mmrobot_joint2_controller
      mmrobot_joint3_controller
      mmrobot_joint4_controller
      mmrobot_joint5_controller
      mmrobot_joint6_controller
      mmrobot_joint7_controller
      panda_joint_publisher"/>
    <node name="multi_joint_controller" pkg="mobile_control" type="multiJointControlNode.py" output="screen"/> 
  </group>
  <group if="$(eval panda_hi == 'PositionJointInterface')">
    <node name="controller_spawner_arm" pkg="controller_manager" ns="/mmrobot" type="spawner" respawn="false" output="screen" args="
      panda_joint_publisher
      joint_position_controller"/>
  </group>
  <group if="$(eval panda_hi == 'EffortJointInterface')">
    <group if="$(eval effort_control == 'inhouse_position')">
      <node name="controller_spawner_arm" pkg="controller_manager" ns="/mmrobot" type="spawner" respawn="false" output="screen" args="
        panda_joint_publisher
        mmrobot_joint1_position_controller
        mmrobot_joint2_position_controller
        mmrobot_joint3_position_controller
        mmrobot_joint4_position_controller
        mmrobot_joint5_position_controller
        mmrobot_joint6_position_controller
        mmrobot_joint7_position_controller"/>
      <node name="multi_joint_controller" pkg="mobile_control" type="multiJointControlPositionNode.py" output="screen"/> 
    </group>
    <group if="$(eval effort_control == 'follow_trajectory')">
      <node name="controller_spawner_arm" pkg="controller_manager" ns="/mmrobot" type="spawner" respawn="false" output="screen" args="
        panda_joint_publisher
        joint_trajectory_controller"/>
    </group>
  </group>

  <!-- Load gripper controller-->
  <node name="controller_spawner_hand" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/mmrobot" args="panda_hand_controller" />

  
  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" ns="/mmrobot" respawn="false" output="screen">
  </node>

  <!-- rviz -->
  <group if="$(arg use_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find mobile_navigation)/rviz/navigation.rviz"/>
  </group>

</launch>
