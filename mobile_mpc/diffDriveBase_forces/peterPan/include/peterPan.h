/*
peterPan : A fast customized optimization solver.

Copyright (C) 2013-2020 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCES PRO v3.0.1 on Friday, June 5, 2020 at 12:28:10 PM */

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif

#ifndef peterPan_H
#define peterPan_H

/* DATA TYPE ------------------------------------------------------------*/
typedef double peterPan_float;

typedef double peterPaninterface_float;

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_peterPan
#define MISRA_C_peterPan (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_peterPan
#define RESTRICT_CODE_peterPan (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_peterPan
#define SET_PRINTLEVEL_peterPan    (2)
#endif

/* timing */
#ifndef SET_TIMING_peterPan
#define SET_TIMING_peterPan    (0)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_peterPan			(250)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_peterPan		(peterPan_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_peterPan	(250) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_peterPan			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_peterPan		(peterPan_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_peterPan		(peterPan_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_peterPan	(peterPan_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_peterPan	(peterPan_float)(1E-06)


/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_peterPan      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_peterPan (0)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_peterPan  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_peterPan   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_peterPan  (-6)

/* no progress in method possible */
#define NOPROGRESS_peterPan   (-7)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_peterPan   (-11)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_peterPan  (-100)

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 10 */
    peterPan_float xinit[10];

    /* vector of size 50 */
    peterPan_float x0[50];

    /* vector of size 50 */
    peterPan_float all_parameters[50];


} peterPan_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 10 */
    peterPan_float x1[10];

    /* vector of size 10 */
    peterPan_float x2[10];

    /* vector of size 10 */
    peterPan_float x3[10];

    /* vector of size 10 */
    peterPan_float x4[10];

    /* vector of size 10 */
    peterPan_float x5[10];


} peterPan_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    peterPan_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    peterPan_float res_ineq;

	/* norm of stationarity condition */
    peterPan_float rsnorm;

	/* max of all complementarity violations */
    peterPan_float rcompnorm;

    /* primal objective */
    peterPan_float pobj;	
	
    /* dual objective */
    peterPan_float dobj;	

    /* duality gap := pobj - dobj */
    peterPan_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    peterPan_float rdgap;		

    /* duality measure */
    peterPan_float mu;

	/* duality measure (after affine step) */
    peterPan_float mu_aff;
	
    /* centering parameter */
    peterPan_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    peterPan_float step_aff;
    
    /* step size (combined direction) */
    peterPan_float step_cc;    

	/* solvertime */
	peterPan_float solvetime;   

	/* time spent in function evaluations */
	peterPan_float fevalstime;  

} peterPan_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Friday, June 5, 2020 12:28:10 PM */
/* User License expires on: (UTC) Wednesday, September 23, 2020 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Wednesday, September 23, 2020 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 0eebcd44-d7c2-4b5f-a3f3-be7c75f90764 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*peterPan_extfunc)(peterPan_float* x, peterPan_float* y, peterPan_float* lambda, peterPan_float* params, peterPan_float* pobj, peterPan_float* g, peterPan_float* c, peterPan_float* Jeq, peterPan_float* h, peterPan_float* Jineq, peterPan_float* H, solver_int32_default stage, solver_int32_default iterations);

extern solver_int32_default peterPan_solve(peterPan_params *params, peterPan_output *output, peterPan_info *info, FILE *fs, peterPan_extfunc evalextfunctions_peterPan);	





#ifdef __cplusplus
}
#endif

#endif
